#include <stdio.h>
#include <stdlib.h>
#include "process.h"

extern GanttSlot gantt_log[MAX_TIME];
extern int gantt_len;

int compare_arrival(const void* a, const void* b) {
    const Process* p1 = (const Process*)a;
    const Process* p2 = (const Process*)b;
    return p1->arrival_time - p2->arrival_time;
}

void run_fcfs(Process* processes, int n) {
    qsort(processes, n, sizeof(Process), compare_arrival);

    int current_time = 0;
    int total_waiting = 0, total_turnaround = 0;

    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time)
            current_time = processes[i].arrival_time;

        processes[i].start_time = current_time;
        processes[i].finish_time = current_time + processes[i].burst_time;
        processes[i].waiting_time = processes[i].start_time - processes[i].arrival_time;
        processes[i].turnaround_time = processes[i].finish_time - processes[i].arrival_time;

        total_waiting += processes[i].waiting_time;
        total_turnaround += processes[i].turnaround_time;

        gantt_log[gantt_len].time = current_time;
        gantt_log[gantt_len].pid = processes[i].pid;
        gantt_len++;

        current_time = processes[i].finish_time;
    }

    //result
    print_gantt(gantt_log, gantt_len);
    printf("\n[Results]\n");
    for (int i = 0; i < n; i++)
        printf("P%d: Waiting = %d, Turnaround = %d\n", processes[i].pid, processes[i].waiting_time, processes[i].turnaround_time);
    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround / n);
}
